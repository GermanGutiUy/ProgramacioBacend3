const express = require('express');
// Body: { users: <num>, pets: <num> }
// Genera y persiste en la DB la cantidad indicada y asocia pets a usuarios aleatoriamente
router.post('/generateData', async (req, res, next) => {
try {
let { users: usersCount = 0, pets: petsCount = 0 } = req.body || {};
usersCount = parseInt(usersCount, 10) || 0;
petsCount = parseInt(petsCount, 10) || 0;


// 1) Generar usuarios y persistir
const usersMock = await generateUsers(usersCount);
// Remove _id generated by mocking (mongoose will overwrite) OR keep it.
const usersToInsert = usersMock.map(u => ({
first_name: u.first_name,
last_name: u.last_name,
email: u.email,
age: u.age,
password: u.password,
role: u.role,
pets: []
}));


const insertedUsers = usersCount > 0 ? await User.insertMany(usersToInsert) : [];


// 2) Generar pets y persistir
const petsMock = generatePets(petsCount);
// Assign owner randomly from insertedUsers if there are users
const userIds = insertedUsers.map(u => u._id);
const petsToInsert = petsMock.map((p) => ({
name: p.name,
species: p.species,
age: p.age,
owner: userIds.length ? userIds[Math.floor(Math.random() * userIds.length)] : null
}));


const insertedPets = petsCount > 0 ? await Pet.insertMany(petsToInsert) : [];


// 3) Update users with assigned pets (group pets by owner)
if (insertedPets.length && userIds.length) {
const mapUserToPets = {};
insertedPets.forEach(p => {
if (!p.owner) return;
const id = p.owner.toString();
if (!mapUserToPets[id]) mapUserToPets[id] = [];
mapUserToPets[id].push(p._id);
});


const updatePromises = Object.entries(mapUserToPets).map(([userId, petIds]) =>
User.findByIdAndUpdate(userId, { $push: { pets: { $each: petIds } } })
);
await Promise.all(updatePromises);
}


// 4) Comprobaci√≥n mediante los servicios GET de users y pets
// Retorno conteos y ejemplos para comprobar
const totalUsers = await User.countDocuments();
const totalPets = await Pet.countDocuments();


res.json({
status: 'success',
inserted: { users: insertedUsers.length, pets: insertedPets.length },
totals: { users: totalUsers, pets: totalPets },
sample: {
users: insertedUsers.slice(0, 5),
pets: insertedPets.slice(0, 5)
}
});
} catch (err) {
next(err);
}
});


module.exports = router;